package test

import (
	"context"
	"encoding/json"
	"fmt"
	"github.com/redis/go-redis/v9"
	"log"
	"os"
	"os/signal"
	"strconv"
	"sync"
	"syscall"
	"time"
)

//sample redis stream worker

var wg = &sync.WaitGroup{}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–±—ã—Ç–∏–π –∏–∑ PHP
type DoorOpenEvent struct {
	Date      int64  `json:"date"`
	IP        string `json:"ip"`
	SubID     *int64 `json:"sub_id"` // –º–æ–∂–µ—Ç –±—ã—Ç—å null
	EventType int    `json:"event_type"`
	Door      int    `json:"door"`
	Detail    string `json:"detail"`
	Timestamp int64  `json:"timestamp"`
}

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Stream
type StreamMessage struct {
	Payload string `json:"payload"`
}

func Start(ctx context.Context, cancel context.CancelFunc) {
	client := getRedis()
	defer client.Close()

	go func() {
		sigChan := make(chan os.Signal, 1)
		signal.Notify(sigChan, syscall.SIGINT, syscall.SIGTERM)
		<-sigChan
		log.Println("Received shutdown signal")
		cancel()
	}()

	// init consumer group
	initConsumerGroup(ctx, client)

	// start workers
	workersCount, _ := strconv.Atoi(getEnv("WORKERS_COUNT", "3"))
	for i := 1; i <= workersCount; i++ {
		wg.Add(1)
		go worker(ctx, client, fmt.Sprintf("worker_%d", i))
	}

	log.Printf("Started %d workers\n", workersCount)
	wg.Wait()
	log.Println("Door Events Consumer stopped")

}

func getRedis() *redis.Client {
	var (
		host     = getEnv("REDIS_HOST", "172.28.0.4")
		port     = getEnv("REDIS_PORT", "6379")
		password = getEnv("REDIS_PASSWORD", "qqq")
	)

	client := redis.NewClient(&redis.Options{
		Addr:     host + ":" + port,
		Password: password,
		DB:       0,
	})

	_, err := client.Ping(context.Background()).Result()
	if err != nil {
		log.Fatal("Failed to connect to Redis:", err)
	}

	log.Println("‚úÖ Successfully connected to Redis")
	return client
}

func getEnv(envName, valueDefault string) string {
	if value := os.Getenv(envName); value != "" {
		return value
	}
	return valueDefault
}

func initConsumerGroup(ctx context.Context, client *redis.Client) {
	stream := "door_open_events_stream"
	group := "door_open_events_workers"

	// –°–æ–∑–¥–∞–µ–º consumer group –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
	err := client.XGroupCreateMkStream(ctx, stream, group, "0").Err()
	if err != nil {
		log.Printf("‚ÑπÔ∏è Consumer group already exists: %s\n", group)
	} else {
		log.Printf("‚úÖ Consumer group created: %s\n", group)
	}
}

func worker(ctx context.Context, client *redis.Client, workerName string) {
	defer wg.Done()

	stream := "door_open_events_stream"
	group := "door_events_processor"
	batchSize, _ := strconv.Atoi(getEnv("BATCH_SIZE", "5"))
	blockTime, _ := strconv.Atoi(getEnv("BLOCK_TIME", "5000"))

	log.Printf("üë∑ Worker %s started\n", workerName)

	processedCount := 0

	for {
		select {
		case <-ctx.Done():
			log.Printf("üõë Worker %s stopping (processed: %d)\n", workerName, processedCount)
			return
		default:
			// –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ stream
			result, err := client.XReadGroup(ctx, &redis.XReadGroupArgs{
				Group:    group,
				Consumer: workerName,
				Streams:  []string{stream, ">"},
				Count:    int64(batchSize),
				Block:    time.Duration(blockTime) * time.Millisecond,
			}).Result()

			if err != nil {
				if err == redis.Nil {
					// –¢–∞–π–º–∞—É—Ç - –Ω–µ—Ç –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
					continue
				}
				log.Printf("‚ùå Worker %s error reading: %v\n", workerName, err)
				time.Sleep(1 * time.Second)
				continue
			}

			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
			for _, stream := range result {
				for _, message := range stream.Messages {
					processedCount++

					if processDoorEvent(message, workerName) {
						// –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
						err := client.XAck(ctx, stream.Stream, group, message.ID).Err()
						if err != nil {
							log.Printf("‚ùå Worker %s failed to ack message %s: %v\n",
								workerName, message.ID, err)
						} else {
							log.Printf("‚úÖ Worker %s acked message %s\n",
								workerName, message.ID)
						}
					} else {
						log.Printf("‚ö†Ô∏è Worker %s processing failed, will retry: %s\n",
							workerName, message.ID)
					}

					// –õ–æ–≥–∏—Ä—É–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 —Å–æ–æ–±—â–µ–Ω–∏–π
					if processedCount%10 == 0 {
						log.Printf("üìä Worker %s processed %d messages\n",
							workerName, processedCount)
					}
				}
			}
		}
	}
}

func processDoorEvent(message redis.XMessage, workerName string) bool {
	// –ò–∑–≤–ª–µ–∫–∞–µ–º payload
	payload, ok := message.Values["payload"].(string)
	if !ok {
		log.Printf("‚ùå Worker %s: invalid payload format in message %s\n",
			workerName, message.ID)
		return false
	}

	// –ü–∞—Ä—Å–∏–º JSON —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ–±—ã—Ç–∏—è
	var event DoorOpenEvent
	err := json.Unmarshal([]byte(payload), &event)
	if err != nil {
		log.Printf("‚ùå Worker %s: failed to unmarshal event %s: %v\n",
			workerName, message.ID, err)
		return false
	}

	// –ó–¥–µ—Å—å –≤–∞—à–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è
	// –ó–∞–º–µ–Ω–∏—Ç–µ —ç—Ç—É —á–∞—Å—Ç—å –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î –∏–ª–∏ –¥—Ä—É–≥—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É

	log.Printf("üö™ Worker %s processing event: IP=%s, EventType=%d, Door=%d, Detail=%s\n",
		workerName, event.IP, event.EventType, event.Door, event.Detail)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –ª–æ–≥–∏–∫—É)
	success := saveToDatabase(event)
	if !success {
		log.Printf("‚ùå Worker %s: failed to save event to database: %s\n",
			workerName, message.ID)
		return false
	}

	return true
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à—É —Ä–µ–∞–ª–∏–∑–∞—Ü–∏—é)
func saveToDatabase(event DoorOpenEvent) bool {
	// TODO: –†–µ–∞–ª–∏–∑—É–π—Ç–µ –∑–∞–ø–∏—Å—å –≤ –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
	// –≠—Ç–æ –∑–∞–º–µ–Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º—É –º–µ—Ç–æ–¥—É addDoorOpenData –∏–∑ PHP

	// –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏:
	// db.Exec("INSERT INTO door_events (...) VALUES (?, ?, ?, ?, ?, ?)",
	//     event.Date, event.IP, event.SubID, event.EventType, event.Door, event.Detail)

	// –ò–º–∏—Ç–∏—Ä—É–µ–º —Ä–∞–±–æ—Ç—É
	time.Sleep(50 * time.Millisecond)

	// –í 95% —Å–ª—É—á–∞–µ–≤ —É—Å–ø–µ—à–Ω–æ, –≤ 5% - –æ—à–∏–±–∫–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
	if time.Now().UnixNano()%100 < 5 {
		return false
	}

	return true
}

// Worker –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ pending —Å–æ–æ–±—â–µ–Ω–∏–π (–Ω–∞ —Å–ª—É—á–∞–π —Å–±–æ–µ–≤)
func pendingWorker(ctx context.Context, client *redis.Client) {
	stream := "door_open_events_stream"
	group := "door_events_processor"
	workerName := "pending_recovery"

	log.Printf("üîß Pending worker %s started\n", workerName)

	for {
		select {
		case <-ctx.Done():
			return
		default:
			// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º pending —Å–æ–æ–±—â–µ–Ω–∏—è
			messages, _, err := client.XAutoClaim(ctx, &redis.XAutoClaimArgs{
				Stream:   stream,
				Group:    group,
				Consumer: workerName,
				MinIdle:  30 * time.Second, // —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ä—à–µ 30 —Å–µ–∫—É–Ω–¥
				Count:    10,
				Start:    "0-0",
			}).Result()

			if err != nil {
				log.Printf("‚ùå Pending worker error: %v\n", err)
				time.Sleep(5 * time.Second)
				continue
			}

			if len(messages) > 0 {
				log.Printf("üîß Pending worker processing %d messages\n", len(messages))

				for _, msg := range messages {
					if processDoorEvent(msg, workerName) {
						client.XAck(ctx, stream, group, msg.ID)
					}
				}
			}

			time.Sleep(10 * time.Second)
		}
	}
}
